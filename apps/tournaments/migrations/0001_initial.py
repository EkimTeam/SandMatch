# Generated by Django 5.2.6 on 2025-10-09 09:06

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('teams', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ruleset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('ordering_priority', models.JSONField(help_text='Приоритет критериев сортировки/определения мест')),
            ],
            options={
                'verbose_name': 'Регламент',
                'verbose_name_plural': 'Регламенты',
            },
        ),
        migrations.CreateModel(
            name='SetFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('games_to', models.IntegerField(default=6, help_text='До скольки геймов играется сет')),
                ('tiebreak_at', models.IntegerField(default=6, help_text='Тай-брейк при этом счёте, обычно 6:6')),
                ('allow_tiebreak_only_set', models.BooleanField(default=True, help_text='Разрешён ли сет-тайбрейк до 10 как решающий')),
                ('max_sets', models.IntegerField(default=1, help_text='Максимум сетов в матче (1 или 3)')),
                ('tiebreak_points', models.IntegerField(default=7, help_text='Очки в обычном тай-брейке (обычно 7)')),
                ('decider_tiebreak_points', models.IntegerField(default=10, help_text='Очки в решающем тай-брейке (сет-тайбрейк), обычно 10')),
            ],
            options={
                'verbose_name': 'Формат сета',
                'verbose_name_plural': 'Форматы сетов',
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('date', models.DateField()),
                ('status', models.CharField(choices=[('created', 'Создан'), ('active', 'Активен'), ('completed', 'Завершён')], default='created', max_length=16)),
                ('system', models.CharField(choices=[('round_robin', 'Круговая'), ('knockout', 'Олимпийка')], max_length=16)),
                ('participant_mode', models.CharField(choices=[('singles', 'Одиночки'), ('doubles', 'Пары')], default='doubles', max_length=16)),
                ('groups_count', models.IntegerField(default=1)),
                ('brackets_count', models.IntegerField(blank=True, null=True, verbose_name='Число сеток')),
                ('planned_participants', models.PositiveIntegerField(blank=True, help_text='Планируемое число участников (для UI)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ruleset', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tournaments.ruleset')),
                ('set_format', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tournaments.setformat')),
            ],
            options={
                'verbose_name': 'Турнир',
                'verbose_name_plural': 'Турниры',
            },
        ),
        migrations.CreateModel(
            name='KnockoutBracket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveSmallIntegerField()),
                ('size', models.PositiveSmallIntegerField()),
                ('has_third_place', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knockout_brackets', to='tournaments.tournament')),
            ],
            options={
                'verbose_name': 'Сетка плей-офф',
                'verbose_name_plural': 'Сетки плей-офф',
            },
        ),
        migrations.CreateModel(
            name='TournamentEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_out_of_competition', models.BooleanField(default=False, verbose_name='Вне зачёта')),
                ('group_index', models.PositiveSmallIntegerField(default=1)),
                ('row_index', models.PositiveSmallIntegerField(default=1)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_entries', to='teams.team')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='tournaments.tournament')),
            ],
            options={
                'verbose_name': 'Участие в турнире',
                'verbose_name_plural': 'Участия в турнире',
            },
        ),
        migrations.CreateModel(
            name='DrawPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveSmallIntegerField()),
                ('seed', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('source', models.CharField(choices=[('MAIN', 'Main'), ('LL', 'Lucky Loser'), ('WC', 'Wild Card'), ('Q', 'Qualifier'), ('BYE', 'Bye')], default='MAIN', max_length=8)),
                ('bracket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='tournaments.knockoutbracket')),
                ('entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='draw_positions', to='tournaments.tournamententry')),
            ],
            options={
                'verbose_name': 'Позиция жеребьёвки',
                'verbose_name_plural': 'Позиции жеребьёвки',
            },
        ),
        migrations.CreateModel(
            name='TournamentEntryStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wins', models.PositiveIntegerField(default=0)),
                ('sets_won', models.PositiveIntegerField(default=0)),
                ('sets_lost', models.PositiveIntegerField(default=0)),
                ('games_won', models.PositiveIntegerField(default=0)),
                ('games_lost', models.PositiveIntegerField(default=0)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entry', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='tournaments.tournamententry')),
            ],
            options={
                'verbose_name': 'Статистика участника турнира',
                'verbose_name_plural': 'Статистики участников турнира',
            },
        ),
        migrations.AddConstraint(
            model_name='knockoutbracket',
            constraint=models.UniqueConstraint(fields=('tournament', 'index'), name='uniq_knockout_bracket_in_tournament'),
        ),
        migrations.AddConstraint(
            model_name='tournamententry',
            constraint=models.UniqueConstraint(fields=('tournament', 'team'), name='unique_entry_team_in_tournament'),
        ),
        migrations.AddConstraint(
            model_name='tournamententry',
            constraint=models.UniqueConstraint(fields=('tournament', 'group_index', 'row_index'), name='unique_entry_position'),
        ),
        migrations.AddConstraint(
            model_name='drawposition',
            constraint=models.UniqueConstraint(fields=('bracket', 'position'), name='uniq_draw_position_in_bracket'),
        ),
    ]
