#!/usr/bin/env bash
set -euo pipefail

# Enhanced deployment script with rollback and advanced health checks
# Requirements on VM:
# - repo cloned at /opt/sandmatch/app
# - docker and docker compose plugin installed
# - if GHCR images are private: docker login ghcr.io must be done before pulling

# Auto-detect environment
if [ -f "docker-compose.prod.yml" ]; then
    COMPOSE_FILE="docker-compose.prod.yml"
else
    COMPOSE_FILE="docker-compose.yml" 
fi
export COMPOSE_FILE

log() { echo "[deploy] $*"; }
log "Using compose file: $COMPOSE_FILE"

WEB_IMAGE="${WEB_IMAGE:-ghcr.io/ekimteam/sandmatch/web}"
WEB_IMAGE_TAG="${WEB_IMAGE_TAG:-latest}"
APP_DIR="/opt/sandmatch/app"

log "Using image: ${WEB_IMAGE}:${WEB_IMAGE_TAG}"

cd "$APP_DIR"
sudo chown -R ubuntu:ubuntu static/ 2>/dev/null || true
sudo chmod -R 775 static/ 2>/dev/null || true

# Fetch latest repo state (idempotent)
if git rev-parse --git-dir >/dev/null 2>&1; then
  log "Updating repository..."
  git fetch --all --prune
  git reset --hard origin/main || true
else
  log "WARNING: not a git repo at $APP_DIR; skipping git pull"
fi

# Export variables for compose
export WEB_IMAGE
export WEB_IMAGE_TAG

log "Pulling image..."
docker compose pull web

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–∞—Ç–∏–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–æ–≤–æ–π
log "Cleaning old static structure..."
rm -rf staticfiles/ || true  # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É staticfiles
mkdir -p static/ || true     # —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ static —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# –û—á–∏—Å—Ç–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∞—Å—Å–µ—Ç–æ–≤ (Vite build)
log "Clearing old frontend assets on host (./static/frontend)..."
mkdir -p static/frontend || true
rm -rf static/frontend/* || true

log "Starting containers..."
docker compose up -d web

# ============================================================================
# 1. –ú–ò–ì–†–ê–¶–ò–ò –° –û–¢–ö–ê–¢–û–ú
# ============================================================================

log "Running migrations with rollback protection..."

# –ë—ç–∫–∞–ø –ë–î –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
BACKUP_FILE="/tmp/sandmatch_backup_$(date +%Y%m%d_%H%M%S).json"
log "Creating database backup: $BACKUP_FILE"
docker compose exec -T web python manage.py dumpdata \
    --natural-foreign \
    --exclude=contenttypes \
    --exclude=auth.Permission \
    --exclude=admin.logentry \
    --indent=2 > "$BACKUP_FILE"

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–ª—Å—è
if [ ! -s "$BACKUP_FILE" ]; then
    log "ERROR: Backup file is empty or not created"
    exit 1
fi
BACKUP_SIZE=$(wc -l < "$BACKUP_FILE")
log "Backup created successfully ($BACKUP_SIZE lines)"

# –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
if docker compose exec -T web python manage.py migrate --noinput; then
    log "Migrations completed successfully"
    
    # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
    find /tmp -name "sandmatch_backup_*.json" -type f | sort -r | tail -n +6 | xargs rm -f --
else
    log "ERROR: Migrations failed! Restoring from backup..."
    
    # –û—Ç–∫–∞—Ç –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
    LAST_GOOD_MIGRATION=$(docker compose exec -T web python manage.py showmigrations | grep -B1 "\[X\]" | grep -v "\[X\]" | tail -1 | awk '{print $1}')
    if [ -n "$LAST_GOOD_MIGRATION" ]; then
        log "Rolling back to: $LAST_GOOD_MIGRATION"
        docker compose exec -T web python manage.py migrate "$LAST_GOOD_MIGRATION" --noinput
    fi
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    log "Restoring data from backup..."
    docker compose exec -T web python manage.py flush --noinput
    docker compose exec -T web python manage.py loaddata "$BACKUP_FILE"
    
    log "Database restored from backup: $BACKUP_FILE"
    exit 1
fi

# –°–±–æ—Ä–∫–∞ —Å—Ç–∞—Ç–∏–∫–∏ Django + —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
log "Collecting static files..."
docker compose exec -T web python manage.py collectstatic --noinput --clear

# ============================================================================
# 2. –ë–ê–ó–û–í–´–ô HEALTH CHECK
# ============================================================================

log "Basic health check..."

HEALTH_URL="http://127.0.0.1:8000/api/health/"
MAX_ATTEMPTS=30
SLEEP_SECS=2
attempt=1
until curl -fsS --max-time 2 "$HEALTH_URL" >/dev/null; do
  if [ $attempt -ge $MAX_ATTEMPTS ]; then
    log "Health check failed after $((MAX_ATTEMPTS*SLEEP_SECS))s: $HEALTH_URL"
    log "docker compose ps:" && docker compose ps || true
    log "Last 200 lines of web logs:" && docker compose logs --no-color --tail=200 web || true
    exit 1
  fi
  log "Waiting for web to become healthy... (attempt $attempt/$MAX_ATTEMPTS)"
  attempt=$((attempt+1))
  sleep $SLEEP_SECS
done

log "‚úÖ Basic health check passed"

# ============================================================================
# 3. –ü–†–û–î–í–ò–ù–£–¢–´–ï HEALTH CHECKS
# ============================================================================

log "Running advanced smoke tests..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö API endpoints
SMOKE_TESTS=(
    "/api/tournaments/"
    "/api/players/" 
    "/api/teams/"
)

for endpoint in "${SMOKE_TESTS[@]}"; do
    SMOKE_URL="https://beachplay.ru${endpoint}"
    log "Testing API: $SMOKE_URL"
    
    RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$SMOKE_URL")
    if [ "$RESPONSE_CODE" -ne 200 ] && [ "$RESPONSE_CODE" -ne 401 ] && [ "$RESPONSE_CODE" -ne 403 ]; then
        log "ERROR: Smoke test failed for $SMOKE_URL (HTTP $RESPONSE_CODE)"
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        log "Detailed response:"
        curl -v "$SMOKE_URL" --max-time 5 2>&1 | head -20 || true
        
        exit 1
    fi
    log "‚úÖ API $endpoint: HTTP $RESPONSE_CODE"
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏–∫–∏
log "Testing static files..."
STATIC_PATTERNS=(
    "/static/frontend/assets/main-*.js"
    "/static/frontend/assets/main-*.css"
    "/static/img/logo.png"
)

for pattern in "${STATIC_PATTERNS[@]}"; do
    # –ù–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    if [ "$pattern" = "/static/img/logo.png" ]; then
        STATIC_URL="https://beachplay.ru/static/img/logo.png"
    else
        # –î–ª—è JS/CSS —Ñ–∞–π–ª–æ–≤ –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è —Å —Ö–µ—à–µ–º
        ACTUAL_FILE=$(find /opt/sandmatch/app/static/ -path "*${pattern/\*/}" -name "*.${pattern##*.}" | head -1)
        if [ -n "$ACTUAL_FILE" ]; then
            FILENAME=$(basename "$ACTUAL_FILE")
            DIRNAME=$(basename "$(dirname "$ACTUAL_FILE")")
            STATIC_URL="https://beachplay.ru/static/frontend/${DIRNAME}/${FILENAME}"
        else
            log "WARNING: Static file not found for pattern: $pattern"
            continue
        fi
    fi
    
    if curl -fsS --max-time 5 "$STATIC_URL" > /dev/null; then
        log "‚úÖ Static file: $STATIC_URL"
    else
        log "ERROR: Static file not accessible: $STATIC_URL"
        exit 1
    fi
done

# ============================================================================
# 4. –ì–õ–£–ë–û–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê (DEEP HEALTH CHECK)
# ============================================================================

log "Running deep health check..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª—É–±–æ–∫–æ–≥–æ health check (–µ—Å–ª–∏ endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
DEEP_HEALTH_URL="https://beachplay.ru/api/health/deep/"
BASIC_DEEP_CHECK_URL="https://beachplay.ru/api/health/"

# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π health
if curl -fsS --max-time 10 "$BASIC_DEEP_CHECK_URL" > /dev/null; then
    log "‚úÖ Basic deep health endpoint"
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    DEEP_RESPONSE=$(curl -s --max-time 10 "$DEEP_HEALTH_URL" 2>/dev/null || curl -s --max-time 10 "$BASIC_DEEP_CHECK_URL")
    if [ -n "$DEEP_RESPONSE" ]; then
        log "Deep health response: $DEEP_RESPONSE"
    fi
else
    log "WARNING: Deep health endpoint not available, using basic health"
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
log "Testing main page..."
if curl -fsS --max-time 10 "https://beachplay.ru/" > /dev/null; then
    log "‚úÖ Main page loaded successfully"
else
    log "ERROR: Main page failed to load"
    exit 1
fi

# ============================================================================
# –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
# ============================================================================

log "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
log "üìä Summary:"
log "  - Database: migrated with backup protection"
log "  - Static files: collected and verified" 
log "  - API endpoints: smoke tested"
log "  - Health checks: passed"
log "  - Main page: accessible"
log ""
log "üöÄ Application is ready at: https://beachplay.ru"
log "üíæ Latest backup: $BACKUP_FILE ($BACKUP_SIZE lines)"

# –û—á–∏—Å—Ç–∫–∞ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
find /tmp -name "sandmatch_backup_*.json" -type f -mtime +7 -delete 2>/dev/null || true
