name: CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image_repo:
        description: "Полное имя образа (например, ghcr.io/EkimTeam/SandMatch/web)"
        required: true
        default: ghcr.io/ekimteam/sandmatch/web
      image_tag:
        description: "Тег образа (например, main-<sha> или vX.Y.Z). Оставьте пустым, чтобы использовать текущий SHA."
        required: false
        default: ""

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      RESOLVED_IMAGE_TAG: ${{ github.event_name == 'push' && format('main-{0}', github.sha) || (inputs.image_tag != '' && inputs.image_tag || format('main-{0}', github.sha)) }}
      RESOLVED_IMAGE_REPO: ${{ github.event_name == 'push' && 'ghcr.io/ekimteam/sandmatch/web' || inputs.image_repo }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME || github.actor }}
          password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.RESOLVED_IMAGE_REPO }}:${{ env.RESOLVED_IMAGE_TAG }}
            ${{ env.RESOLVED_IMAGE_REPO }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.repository }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      RESOLVED_IMAGE_TAG: latest
      RESOLVED_IMAGE_REPO: ${{ github.event_name == 'push' && 'ghcr.io/ekimteam/sandmatch/web' || inputs.image_repo }}
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          port: ${{ secrets.PROD_SSH_PORT || '22' }}
          key: ${{ secrets.PROD_SSH_KEY }}
          passphrase: ${{ secrets.PROD_SSH_PASSPHRASE || '' }}
          script_stop: true
          envs: IMAGE_REPO,IMAGE_TAG,GHCR_USERNAME,GHCR_TOKEN
          script: |
            set -euo pipefail
            IMAGE_REPO='${{ env.RESOLVED_IMAGE_REPO }}'
            IMAGE_TAG='${{ env.RESOLVED_IMAGE_TAG }}'
            GHCR_USERNAME='${{ secrets.GHCR_USERNAME || github.actor }}'
            GHCR_TOKEN='${{ secrets.GHCR_TOKEN || '' }}'

            echo "[cd] docker login ghcr.io"
            if [ -n "$GHCR_TOKEN" ]; then
              echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
            else
              echo "[cd] GHCR_TOKEN не задан, пропускаю docker login (образ может быть публичным)"
            fi

            cd /opt/sandmatch/app
            chmod +x deploy/deploy.sh || true
            WEB_IMAGE="$IMAGE_REPO" WEB_IMAGE_TAG="$IMAGE_TAG" ./deploy/deploy.sh
